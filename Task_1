import pandas as pd
import numpy as np
from scipy.stats import poisson
import matplotlib.pyplot as plt

# --- 1. Configuration and Constants ---
# File and Data Source Settings
EXCEL_FILE_PATH = 'ISyE 6202 + 6335 EasyNode Smart Locker Bank Casework  Fall 2025.xlsx'
SHEET_NAME = 'Deposit2Pickup'

# Key Business Parameters from the Casework
# [cite: 120, 91, 34]
MAX_ANNUAL_DEMAND = 150000      # From Year 5, most optimistic scenario (Scenario 5.5) [cite: 120]
PEAK_4_WEEK_SHARE = 0.13        # From the 4-week period with the highest demand (Period 13) [cite: 34]
PEAK_DAY_OF_WEEK_SHARE = 0.20   # From the day of the week with the highest demand (Friday) [cite: 34]
SERVICE_LEVEL_TARGET = 0.995    # Target service level [cite: 140]

# Locker Size Classification and Space Requirement Probabilities
# [cite: 31]
SPACE_REQUIREMENT_PROB = {
    'small': sum([0.08, 0.12, 0.15]),                          # 1-3 ft³
    'medium': sum([0.12, 0.08, 0.06, 0.05, 0.05, 0.05]),      # 4-9 ft³
    'large': sum([0.04, 0.04, 0.03, 0.03, 0.03, 0.02, 0.02, 0.02, 0.01]) # 10-18 ft³
}

# Physical Layout Design Parameters
# These are reasonable assumptions based on common smart locker designs
LOCKER_GRID_UNITS = {'small': 1, 'medium': 2, 'large': 3} # Vertical grid units occupied by each locker size
GRID_HEIGHT = 15          # Total height of the locker bank (in grid units)
UI_MODULE_WIDTH = 2       # Assumes a User Interface (UI)/payment module with a width of 2 units

def calculate_peak_daily_demand(annual_demand, period_share, day_share):
    """
    Calculates the number of package arrivals on the peak day based on annual demand, 
    peak period share, and peak day share.

    Args:
        annual_demand (int): The maximum projected annual demand.
        period_share (float): The demand share of the peak 4-week period.
        day_share (float): The demand share of the peak day of the week.

    Returns:
        float: The projected average number of package arrivals on the peak day.
    """
    # [cite: 36, 34]
    print("Calculating peak daily demand...")
    parcels_in_peak_period = annual_demand * period_share
    avg_parcels_per_week_peak = parcels_in_peak_period / 4
    peak_day_demand = avg_parcels_per_week_peak * day_share
    print(f"Projected peak daily arrivals: {peak_day_demand:.2f}\n")
    return peak_day_demand

def calculate_avg_stay_duration(filepath, sheetname):
    """
    Reads the deposit-to-pickup time probability matrix from an Excel file and 
    calculates the average package stay duration.

    Args:
        filepath (str): The path to the Excel file.
        sheetname (str): The name of the worksheet containing the probability matrix.

    Returns:
        float: The average stay duration of a package in the locker, in hours.
    """
    print("Calculating average package stay duration...")
    # [cite: 42, 130]
    df = pd.read_excel(filepath, sheet_name=sheetname, skiprows=9, nrows=24, usecols='D:AB')
    prob_matrix = df.iloc[:24, :24].values / 10000.0  # Original data is multiplied by 10,000 [cite: 130]
    
    total_duration = 0
    for deposit_hour in range(24):
        for pickup_hour in range(24):
            # Calculate duration, accounting for next-day pickups
            duration = (pickup_hour - deposit_hour) if pickup_hour >= deposit_hour else (pickup_hour + 24 - deposit_hour)
            total_duration += prob_matrix[deposit_hour, pickup_hour] * duration
            
    # The sum of probabilities should be 1, but we divide by the sum for robustness
    avg_duration_hours = total_duration / np.sum(prob_matrix)
    print(f"Average package stay duration: {avg_duration_hours:.2f} hours\n")
    return avg_duration_hours

def estimate_total_lockers(peak_demand, avg_duration, service_level):
    """
    Estimates the total number of lockers required to meet the service level, using 
    queueing theory concepts (Little's Law and Poisson distribution).

    Args:
        peak_demand (float): The number of package arrivals on the peak day.
        avg_duration (float): The average package stay duration in hours.
        service_level (float): The target service level.

    Returns:
        int: The estimated total number of lockers required.
    """
    print("Estimating the total number of lockers required...")
    # 1. Calculate the average hourly arrival rate (lambda) on the peak day
    arrival_rate_hourly = peak_demand / 24
    
    # 2. Use Little's Law (L = λ * W) to calculate the average number of packages 
    #    in the system (i.e., average occupied lockers)
    #    L: Avg number of items in system, λ: Arrival rate, W: Avg time in system
    avg_occupied_lockers = arrival_rate_hourly * avg_duration
    
    # 3. Use the Poisson distribution's PPF (Percent Point Function, the inverse of CDF) 
    #    to find the capacity needed for the service level. This is a heuristic assuming 
    #    the number of occupied lockers at any time follows a Poisson distribution 
    #    with a mean of L. We need to find the minimum number of lockers C, 
    #    such that P(occupied lockers <= C) >= service_level.
    mu = avg_occupied_lockers
    required_lockers = poisson.ppf(service_level, mu)
    
    print(f"Average occupied lockers (L): {avg_occupied_lockers:.2f}")
    print(f"To achieve a {service_level*100}% service level, an estimated {int(required_lockers)} lockers are needed.\n")
    return int(required_lockers)

def determine_locker_mix_and_layout(total_lockers, space_probs, grid_units, height, ui_width):
    """
    Determines the quantity of each locker size and the physical layout based on the 
    total number of lockers and size probabilities.

    Args:
        total_lockers (int): The total number of lockers.
        space_probs (dict): Probabilities for each size requirement.
        grid_units (dict): The number of grid units occupied by each size.
        height (int): The height of the locker bank.
        ui_width (int): The width of the UI module.

    Returns:
        dict: A dictionary containing the design results.
    """
    print("Determining locker mix and layout...")
    # Calculate the number of lockers for each size, rounding and ensuring the total is correct
    num_s = round(total_lockers * space_probs['small'])
    num_m = round(total_lockers * space_probs['medium'])
    num_l = total_lockers - num_s - num_m # The last one is calculated by subtraction to ensure the sum is correct
    
    # Calculate the total grid units required for the layout
    total_grid_units_needed = (num_s * grid_units['small']) + \
                              (num_m * grid_units['medium']) + \
                              (num_l * grid_units['large'])
    
    # Add the space required for the UI module
    total_width_units = total_grid_units_needed / height + ui_width
    
    # The width must be an integer, so we round up
    required_width = np.ceil(total_width_units)
    
    design = {
        'Total Lockers': total_lockers,
        'Small Lockers': num_s,
        'Medium Lockers': num_m,
        'Large Lockers': num_l,
        'Layout Height (units)': height,
        'Layout Width (units)': int(required_width)
    }
    return design

def main():
    """
    Main function to execute the entire baseline design process.
    """
    # Step 1: Calculate peak daily demand
    peak_demand = calculate_peak_daily_demand(MAX_ANNUAL_DEMAND, PEAK_4_WEEK_SHARE, PEAK_DAY_OF_WEEK_SHARE)
    
    # Step 2: Calculate the average package stay duration
    avg_duration = calculate_avg_stay_duration(EXCEL_FILE_PATH, SHEET_NAME)
    
    # Step 3: Estimate the total number of lockers required
    total_lockers_needed = estimate_total_lockers(peak_demand, avg_duration, SERVICE_LEVEL_TARGET)
    
    # Step 4: Determine the locker mix and layout
    baseline_design = determine_locker_mix_and_layout(
        total_lockers_needed,
        SPACE_REQUIREMENT_PROB,
        LOCKER_GRID_UNITS,
        GRID_HEIGHT,
        UI_MODULE_WIDTH
    )
    
    # Step 5: Display the final design proposal clearly
    print("--- Task 1: Baseline Fixed-Configuration Locker Bank Design ---")
    print(f"Total Number of Lockers: {baseline_design['Total Lockers']}")
    print("Locker Size Distribution:")
    print(f"  - Small (S): {baseline_design['Small Lockers']} units")
    print(f"  - Medium (M): {baseline_design['Medium Lockers']} units")
    print(f"  - Large (L): {baseline_design['Large Lockers']} units")
    print("\nPhysical Layout Proposal:")
    print(f"  - Height: {baseline_design['Layout Height (units)']} grid units")
    print(f"  - Width: {baseline_design['Layout Width (units)']} grid units (including UI module)")
    print("-----------------------------------------------------------")
    
    # Visualize the design
    visualize_design(baseline_design)

def visualize_design(design):
    """
    Visualizes the locker design.
    """
    sizes = ['small', 'medium', 'large']
    colors = ['#FFC300', '#FF5733', '#C70039']
    plt.bar(sizes, [design['Small Lockers'], design['Medium Lockers'], design['Large Lockers']], color=colors)
    plt.xlabel('Locker Size')
    plt.ylabel('Number of Lockers')
    plt.title('Locker Size Distribution')
    plt.show()


if __name__ == "__main__":
    main()


